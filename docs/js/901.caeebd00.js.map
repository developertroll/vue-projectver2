{"version":3,"file":"js/901.caeebd00.js","mappings":"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","sources":["webpack://vue-projectver2/./src/components/composables/TalkMessage.js","webpack://vue-projectver2/./src/components/Talk/TalkGroupTemplate.vue","webpack://vue-projectver2/./src/components/Talk/TalkGroupTemplate.vue?980a"],"sourcesContent":["import { shallowReactive } from \"vue\";\r\nimport { Member } from \"./Member\";\r\nimport moment from \"moment\";\r\n\r\nexport const TalkMessage = shallowReactive({\r\n  GroupList: localStorage.getItem(\"talkGroupList\")\r\n    ? JSON.parse(localStorage.getItem(\"talkGroupList\"))\r\n    : [],\r\n  refreshGroupList() {\r\n    localStorage.setItem(\"talkGroupList\", JSON.stringify(this.GroupList));\r\n    this.GroupList = JSON.parse(localStorage.getItem(\"talkGroupList\"));\r\n  },\r\n  MessageList: localStorage.getItem(\"talkMessageList\")\r\n    ? JSON.parse(localStorage.getItem(\"talkMessageList\"))\r\n    : [],\r\n  refreshMessageList() {\r\n    localStorage.setItem(\"talkMessageList\", JSON.stringify(this.MessageList));\r\n    this.MessageList = JSON.parse(localStorage.getItem(\"talkMessageList\"));\r\n  },\r\n  refreshAll() {\r\n    this.refreshGroupList();\r\n    this.refreshMessageList();\r\n  },\r\n  MessageTemplate: {\r\n    index: \"\",\r\n    parentGroup: \"\",\r\n    owner: \"\",\r\n    content: \"\",\r\n    update: \"\", // 메세지가 생성된 시간\r\n    status: true, // true: 존재하는 메세지 false: 삭제된 메세지\r\n  },\r\n  GroupTemplate: {\r\n    index: \"\",\r\n    name: \"\",\r\n    member: [],\r\n    message: [],\r\n    update: \"\", // 마지막 메시지가 생성된 시간\r\n    status: true, // true: 존재하는 그룹방, false: 삭제된 그룹방\r\n  },\r\n  // 생성 함수\r\n  createGroup(name, member) {\r\n    const item = {\r\n      index: this.GroupList.length,\r\n      name: name,\r\n      member: member,\r\n      message: [],\r\n      update: moment().format(\"YYYY-MM-DD\"),\r\n      status: true,\r\n    };\r\n    this.GroupList.push(item);\r\n    // 에러를 방지하기 위해 메시지 1개를 임의로 넣어줌\r\n    this.createMessage(item.index, \"채팅방이 생성되었습니다\");\r\n    this.refreshGroupList();\r\n  },\r\n  createMessage(parentGroup, content) {\r\n    const item = {\r\n      index: this.MessageList.length,\r\n      parentGroup: parentGroup,\r\n      owner: Member.currentMember,\r\n      content: content,\r\n      update: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\r\n      status: true,\r\n    };\r\n    const targetGroup = this.findGroupByIndex(parentGroup);\r\n    targetGroup.update = item.update;\r\n    targetGroup.message.push(item.index);\r\n    this.MessageList.push(item);\r\n    this.refreshAll();\r\n  },\r\n  // 조회 함수\r\n  findGroupByIndex(index) {\r\n    return this.GroupList.find((el) => el.index === index);\r\n  },\r\n  findMessageByIndex(index) {\r\n    return this.MessageList.find((el) => el.index === index);\r\n  },\r\n  findMessageGroupByIndex(index) {\r\n    return this.MessageList.filter((el) => el.parentGroup === index);\r\n  },\r\n  findLastMessageByGroupIndex(index) {\r\n    const target = this.findGroupByIndex(index);\r\n    const lastMessageIndex = target.message[target.message.length - 1];\r\n    return this.findMessageByIndex(lastMessageIndex);\r\n  },\r\n  findGroupByMember(member) {\r\n    return this.GroupList.filter((el) => el.member.includes(member));\r\n  },\r\n  // 번역된 조회 함수\r\n  getGroupByIndex(index) {\r\n    const target = this.findGroupByIndex(index);\r\n    const modifiedTarget = { ...target }; // Create a copy of the target object\r\n    const translatedMember = [];\r\n    modifiedTarget.member.forEach((el) => {\r\n      translatedMember.push(Member.findMemberByIndex(el));\r\n    });\r\n    modifiedTarget.member = translatedMember;\r\n    return modifiedTarget;\r\n  },\r\n});\r\n","<template lang=\"\">\r\n  <div class=\"clickHover\">\r\n    <el-card @click=\"showRoom\">\r\n      <template #header>\r\n        <!-- 그룹명, 그룹인원수 -->\r\n        <div>\r\n          {{ GroupData.name }}\r\n          <el-tooltip effect=\"dark\" :content=\"members\" placement=\"top\">\r\n            <el-tag>\r\n              <el-icon><User /></el-icon>\r\n              {{ memberNumber }}\r\n            </el-tag>\r\n          </el-tooltip>\r\n        </div>\r\n      </template>\r\n      <!-- 마지막 메시지와 해당 메시지가 보내진 시간 기록 -->\r\n      <div class=\"greyLetter\">\r\n        <el-row>\r\n          <el-col :span=\"18\">\r\n            {{ finalMessage.content }}\r\n          </el-col>\r\n          <el-col :span=\"6\">\r\n            {{ finalUpdate }}\r\n          </el-col>\r\n        </el-row>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { TalkMessage } from \"@/components/composables/TalkMessage.js\";\r\nimport { Member } from \"@/components/composables/Member.js\";\r\nimport { User } from \"@element-plus/icons-vue\";\r\nimport moment from \"moment\";\r\nexport default {\r\n  name: \"TalkGroupTemplate\",\r\n  components: {\r\n    User,\r\n  },\r\n  props: {\r\n    GroupIndex: {\r\n      type: Number,\r\n      required: true,\r\n    },\r\n  },\r\n  computed: {\r\n    GroupData() {\r\n      return TalkMessage.findGroupByIndex(this.GroupIndex);\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      finalMessage: {},\r\n      memberNumber: 0,\r\n      members: \"\",\r\n      finalUpdate: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    pageInit() {\r\n      this.finalMessage = this.getFinalMessage(this.GroupIndex);\r\n      this.memberNumber = this.GroupData.member.length;\r\n      this.members = this.GroupData.member\r\n        .map((item) => Member.findMemberByIndex(item).name)\r\n        .join(\", \");\r\n      const today = moment().format(\"YYYY-MM-DD HH:mm:ss\");\r\n      if (moment(this.finalMessage.update).isSame(today, \"day\")) {\r\n        this.finalUpdate = moment(this.finalMessage.update).format(\"HH:mm:ss\");\r\n      } else {\r\n        this.finalUpdate = moment(this.finalMessage.update).format(\r\n          \"YYYY-MM-DD HH:mm:ss\"\r\n        );\r\n      }\r\n    },\r\n    getFinalMessage(index) {\r\n      try {\r\n        const finalMessage = TalkMessage.findLastMessageByGroupIndex(index);\r\n        return finalMessage;\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    },\r\n    showRoom() {\r\n      this.$emit(\"showRoom\", this.GroupIndex);\r\n    },\r\n  },\r\n  mounted() {\r\n    this.pageInit();\r\n  },\r\n};\r\n</script>\r\n<style lang=\"\"></style>\r\n","import { render } from \"./TalkGroupTemplate.vue?vue&type=template&id=79e0e47e&lang=true\"\nimport script from \"./TalkGroupTemplate.vue?vue&type=script&lang=js\"\nexport * from \"./TalkGroupTemplate.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["TalkMessage","shallowReactive","GroupList","localStorage","getItem","JSON","parse","refreshGroupList","setItem","stringify","this","MessageList","refreshMessageList","refreshAll","MessageTemplate","index","parentGroup","owner","content","update","status","GroupTemplate","name","member","message","createGroup","item","length","moment","format","push","createMessage","Member","currentMember","targetGroup","findGroupByIndex","find","el","findMessageByIndex","findMessageGroupByIndex","filter","findLastMessageByGroupIndex","target","lastMessageIndex","findGroupByMember","includes","getGroupByIndex","modifiedTarget","translatedMember","forEach","findMemberByIndex","class","_createElementBlock","_hoisted_1","_createVNode","_component_el_card","onClick","$options","showRoom","header","_withCtx","_createElementVNode","GroupData","_component_el_tooltip","effect","$data","members","placement","_component_el_tag","_component_el_icon","_component_User","_toDisplayString","memberNumber","_hoisted_2","_component_el_row","_component_el_col","span","finalMessage","finalUpdate","components","User","props","GroupIndex","type","Number","required","computed","data","methods","pageInit","getFinalMessage","map","join","today","isSame","e","console","log","$emit","mounted","__exports__","render"],"sourceRoot":""}