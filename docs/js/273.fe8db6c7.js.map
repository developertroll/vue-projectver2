{"version":3,"file":"js/273.fe8db6c7.js","mappings":"wNAKO,MAAMA,GAAUC,EAAAA,EAAAA,IAAgB,CACrCC,KAAMC,aAAaC,QAAQ,eACvBC,KAAKC,MAAMH,aAAaC,QAAQ,gBAChC,GACJG,WAAAA,GACEJ,aAAaK,QAAQ,cAAeH,KAAKI,UAAUC,KAAKR,OACxDQ,KAAKR,KAAOG,KAAKC,MAAMH,aAAaC,QAAQ,eAC9C,EACAO,SAAU,CACRC,MAAO,GACPC,KAAM,GACNC,GAAI,GACJC,UAAW,GACXC,MAAO,GACPC,QAAS,GACTC,OAAQC,MAASC,OAAO,cACxBC,QAAQ,EACRC,MAAM,GAERC,aAAAA,CAAcC,GACZ,GAAIA,EAAUV,GAAGW,OAAS,EAsBxB,OArBAD,EAAUV,GAAGY,SAASC,IACpB,MAAMC,EAAO,CACXhB,MAAOF,KAAKR,KAAKuB,OACjBZ,KAAMgB,EAAAA,EAAOC,cACbhB,GAAIa,EACJZ,UAC0B,KAAxBS,EAAUT,UACN,GACAgB,MAAMC,QAAQR,EAAUT,WACxBS,EAAUT,UACV,CAACS,EAAUT,WACjBC,MAAOQ,EAAUR,MACjBC,QAASO,EAAUP,QACnBC,OAAQC,MAASC,OAAO,cACxBC,QAAQ,EACRC,MAAM,GAERW,EAAAA,EAAMC,YAAY,cAAeN,EAAKf,KAAMe,EAAKd,IACjDJ,KAAKR,KAAKiC,KAAKP,EAAK,SAEtBlB,KAAKH,cAGP,MAAMqB,EAAO,CACXhB,MAAOF,KAAKR,KAAKuB,OACjBZ,KAAMgB,EAAAA,EAAOC,cACbhB,GAAIU,EAAUV,GACdC,UAC0B,KAAxBS,EAAUT,UACN,GACAgB,MAAMC,QAAQR,EAAUT,WACxBS,EAAUT,UACV,CAACS,EAAUT,WACjBC,MAAOQ,EAAUR,MACjBC,QAASO,EAAUP,QACnBC,OAAQC,MAASC,OAAO,cACxBC,QAAQ,GAEVX,KAAKR,KAAKiC,KAAKP,GACfK,EAAAA,EAAMC,YAAY,cAAeN,EAAKf,KAAMe,EAAKd,IACjDJ,KAAKH,aACP,EACA6B,WAAAA,CAAYC,EAAcC,EAAaC,GAAa,GAClD,MAAMC,EAAa,CACjB5B,MAAOF,KAAKR,KAAKuB,OACjBZ,KAAMgB,EAAAA,EAAOC,cACbhB,GAAIuB,EAAavB,GACjBC,UAC6B,KAA3BsB,EAAatB,UACT,GACAgB,MAAMC,QAAQK,EAAatB,WAC3BsB,EAAatB,UACb,CAACsB,EAAatB,WACpBC,MAAOqB,EAAarB,MACpBC,QAASoB,EAAapB,QACtBC,OAAQC,MAASC,OAAO,cACxBC,QAAQ,EACRC,MAAM,GAEJiB,IACF7B,KAAK+B,6BAA6BH,GAAab,OAAS,EACpDf,KAAKgC,qBAAqBJ,EAAaE,EAAW5B,OAClDF,KAAKiC,wBAAwBL,EAAaE,EAAW5B,QAE3DF,KAAKR,KAAKiC,KAAKK,GACfP,EAAAA,EAAMC,YAAY,cAAeM,EAAW3B,KAAM2B,EAAW1B,IAC7DJ,KAAKH,aACP,EACAqC,UAAAA,GACE,IAAIC,EAAS,GAwBb,OAvBAnC,KAAKR,KAAKwB,SAASC,IACjB,GAAIA,EAAGN,OAAQ,CACb,IAAIN,EAAY,GACZY,EAAGZ,UACLY,EAAGZ,UAAUW,SAASC,IACpBZ,GAAac,EAAAA,EAAOiB,kBAAkBnB,GAAIoB,KAAO,IAAI,IAGvDhC,EAAY,GAEd8B,EAAOV,KAAK,CACVvB,MAAOe,EAAGf,MACVC,KAAMgB,EAAAA,EAAOiB,kBAAkBnB,EAAGd,MAAMkC,KACxCjC,GAAIe,EAAAA,EAAOiB,kBAAkBnB,EAAGb,IAAIiC,KACpChC,UAAWA,EACXC,MAAOW,EAAGX,MACVC,QAASU,EAAGV,QACZC,OAAQS,EAAGT,OACXG,OAAQM,EAAGN,OACXC,KAAMK,EAAGL,MAEb,KAEKuB,CACT,EACAG,UAAAA,CAAWC,GACT,MAAMC,EAAarB,EAAAA,EAAOiB,kBAAkBG,GAAQF,KACpD,OAAOrC,KAAKkC,aAAaO,QACtBxB,GAAOA,EAAGb,KAAOoC,GAAcvB,EAAGZ,UAAUqC,SAASF,IAE1D,EACAG,kBAAAA,CAAmBzC,GACjB,OAAOF,KAAKkC,aAAaU,MAAM3B,GAAOA,EAAGf,QAAUA,GACrD,EACA2C,0BAAAA,CAA2B3C,GACzB,OAAOF,KAAKR,KAAKoD,MAAM3B,GAAOA,EAAGf,QAAUA,GAC7C,EACA4C,aAAAA,CAAc5C,GACZ,MAAM6C,EAAS/C,KAAK2C,mBAAmBzC,GACvC6C,EAAOpC,QAAS,EAChBX,KAAKH,aACP,EACAmD,8BAAAA,CAA+B9C,GAC7B,MAAM6C,EAAS/C,KAAKR,KAAKoD,MAAM3B,GAAOA,EAAGf,QAAUA,IAC7C+C,EAAeF,EAAO3C,GACtB8C,EAAmBlD,KAAKR,KAAKiD,QAAQxB,GAAOA,EAAGb,KAAO6C,IACtDE,EAAgBD,EAAiBN,MAAM3B,GAAOA,EAAGf,QAAUA,IACjE,MAAQ,GAAEgD,EAAiBE,QAAQD,GAAiB,KAClDD,EAAiBnC,QAErB,EACAsC,cAAAA,CAAenD,GACb,MAAM6C,EAAS/C,KAAKR,KAAKoD,MAAM3B,GAAOA,EAAGf,QAAUA,IACnD,OAAO6C,EAAO3C,KAAOe,EAAAA,EAAOC,aAC9B,EACAkC,WAAAA,CAAYpD,GACV,MAAM6C,EAAS/C,KAAKR,KAAKoD,MAAM3B,GAAOA,EAAGf,QAAUA,IACnD6C,EAAOnC,MAAO,EACdZ,KAAKH,aACP,EAEA0D,kBAAmB9D,aAAaC,QAAQ,qBACpCC,KAAKC,MAAMH,aAAaC,QAAQ,sBAChC,GACJ8D,YAAAA,GACE/D,aAAaK,QACX,oBACAH,KAAKI,UAAUC,KAAKuD,oBAEtBvD,KAAKuD,kBAAoB5D,KAAKC,MAC5BH,aAAaC,QAAQ,qBAEzB,EACAuC,uBAAAA,CAAwBwB,EAAiBC,GACvC,MAAMC,EAAQ,CACZzD,MAAOF,KAAKuD,kBAAkBxC,OAC9B0C,gBAAiBA,EACjBC,aAAc,CAACA,GACf/C,QAAQ,GAEVX,KAAKuD,kBAAkB9B,KAAKkC,GAC5B3D,KAAKwD,cACP,EACAxB,oBAAAA,CAAqByB,EAAiBC,GACpC,IAAIX,EAAS/C,KAAK4D,mBAAmBH,QACtBI,IAAXd,IACFA,EAAS/C,KAAK+B,6BAA6B0B,GAAiB,IAE9DV,EAAOW,aAAajC,KAAKiC,GACzB1D,KAAKwD,cACP,EACAI,kBAAAA,CAAmB1D,GACjB,OAAOF,KAAKuD,kBAAkBX,MAAM3B,GAAOA,EAAGwC,kBAAoBvD,GACpE,EACA6B,4BAAAA,CAA6B7B,GAC3B,OAAOF,KAAKuD,kBAAkBd,QAAQxB,GACpCA,EAAGyC,aAAahB,SAASxC,IAE7B,EACA4D,kBAAAA,CAAmBC,GACjB,MAAM5B,EAAS,GACf,GAAInC,KAAK4D,mBAAmBG,GAAe,CACzC,MAAMhB,EAAS/C,KAAK4D,mBAAmBG,GAKvC,OAJA5B,EAAOV,KAAKzB,KAAK6C,2BAA2BE,EAAOU,kBACnDV,EAAOW,aAAa1C,SAASC,IAC3BkB,EAAOV,KAAKzB,KAAK6C,2BAA2B5B,GAAI,IAE3CkB,CACT,CAAO,GAAInC,KAAK+B,6BAA6BgC,GAAchD,OAAS,EAAG,CACrE,MAAMgC,EAAS/C,KAAK+B,6BAA6BgC,GAOjD,OANAhB,EAAO/B,SAASC,IACdkB,EAAOV,KAAKzB,KAAK6C,2BAA2B5B,EAAGwC,kBAC/CxC,EAAGyC,aAAa1C,SAASC,IACvBkB,EAAOV,KAAKzB,KAAK6C,2BAA2B5B,GAAI,GAChD,IAEGkB,CACT,CACE,OAAOA,CAEX,G,qGCpMO6B,MAAM,iB,sJAnBbC,EAAAA,EAAAA,IA2BM,aA1BJC,EAAAA,EAAAA,IAiBWC,EAAA,CAhBRC,KAAMC,EAAAC,iBACNC,gBAAgBC,EAAAC,oBAChB,eAAc,CAAAC,KAAA,QAAAC,MAAA,cACd,iBAAgBH,EAAAI,S,mBAGjB,IAAgE,EAAhEV,EAAAA,EAAAA,IAAgEW,EAAA,CAA/CH,KAAK,QAAQI,MAAM,KAAKC,SAAA,GAASC,MAAM,SACxDd,EAAAA,EAAAA,IAMkBW,EAAA,CANDH,KAAK,OAAOI,MAAM,KAAKE,MAAM,O,CACjCC,SAAOC,EAAAA,EAAAA,KAAEC,GAAK,EACvBjB,EAAAA,EAAAA,IAESkB,EAAA,CAFAC,KAAyB,OAAnBF,EAAMG,IAAID,KAAgB,UAAY,Q,mBACnD,IAAoB,mBAAjBF,EAAMG,IAAID,MAAI,M,8BAIvBnB,EAAAA,EAAAA,IAA2CW,EAAA,CAA1BH,KAAK,QAAQI,MAAM,QACpCZ,EAAAA,EAAAA,IAAqDW,EAAA,CAApCH,KAAK,SAASI,MAAM,KAAKC,SAAA,Q,qDAE5CQ,EAAAA,EAAAA,GAOM,MAPNC,EAOM,EANJtB,EAAAA,EAAAA,IAKEuB,EAAA,C,WAJSpB,EAAAqB,Y,qCAAArB,EAAAqB,YAAWC,GACpBC,OAAO,oBACNC,MAAOrB,EAAAsB,UACP,YAAW,I,iEAQpB,GACEzD,KAAM,eACN+B,IAAAA,GACE,MAAO,CACL2B,cAAe5E,EAAAA,EAAOC,cACtB4E,kBAAmB7E,EAAAA,EAAO8E,uBAC1BC,UAAW,GACXC,WAAY,KACZT,YAAa,EACbpB,iBAAkB,GAEtB,EACA8B,MAAO,CACLC,WAAY,CACVhB,KAAMiB,OACNrB,QAAS,OAGbsB,SAAU,CACRC,WAAAA,GACE,OAAOlH,EAAAA,EAAQ4C,YACjB,EACA4D,SAAAA,GACE,OAAO9F,KAAKwG,YAAYzF,MAC1B,GAEF0F,QAAS,CACPC,SAAAA,GACE1G,KAAKwG,YAAYxF,SAASC,IACxB,IAAI0F,EAAU,GACd,GAAI3G,KAAKqG,WAEP,OAAQrG,KAAKqG,YACX,IAAK,KACH,GAAIpF,EAAGb,KAAOJ,KAAKgG,kBACjB,OAEFW,EAAUrH,EAAAA,EAAQ+D,eAAepC,EAAGf,OAAS,KAAO,KACpD,MACF,IAAK,OACH,GAAIe,EAAGd,OAASH,KAAKgG,kBACnB,OAEFW,EAAU,KACV,MACF,IAAK,YACH,IAAsD,IAAlD1F,EAAGZ,UAAU+C,QAAQpD,KAAKgG,mBAC5B,OAEFW,EAAU,KACV,MACF,IAAK,OACH,IAAK1F,EAAGL,MAAQK,EAAGb,KAAOJ,KAAKgG,kBAC7B,OAEFW,EAAUrH,EAAAA,EAAQ+D,eAAepC,EAAGf,OAAS,KAAO,KACpD,MACF,IAAK,SACH,GAAIe,EAAGL,MAAQK,EAAGb,KAAOJ,KAAKgG,kBAC5B,OAEFW,EAAUrH,EAAAA,EAAQ+D,eAAepC,EAAGf,OAAS,KAAO,KACpD,MACF,QACE,GAAIe,EAAGb,KAAOJ,KAAKgG,kBACjB,OAEF,UAEC,CACL,GAAI/E,EAAGb,KAAOJ,KAAKgG,kBACjB,OAEFW,EAAUrH,EAAAA,EAAQ+D,eAAepC,EAAGf,OAAS,KAAO,IACtD,CACAF,KAAKkG,UAAUzE,KAAK,CAClBmF,eAAgB3F,EAAGf,MACnBmF,KAAMsB,EACNzG,MAAOF,KAAKkG,UAAUnF,OAAS,EAC/BT,MAAOW,EAAGX,MACVE,OAAQS,EAAGT,OACXI,KAAMK,EAAGL,MACT,IAEJZ,KAAKsE,iBAAmBtE,KAAKkG,UAAUW,MACZ,IAAxB7G,KAAK0F,YAAc,GACD,GAAnB1F,KAAK0F,YAET,EACAjB,mBAAAA,CAAoBL,GAClBpE,KAAKmG,WAAa/B,EAClB9E,EAAAA,EAAQgE,YAAYtD,KAAKmG,WAAWS,gBACpC5G,KAAK8G,MACH,cACA9G,KAAKmG,WAAWS,eAChB5G,KAAKmG,WAAWjG,MAEpB,EACA0E,OAAAA,EAAQ,IAAEU,IAER,OAAIA,EAAI1E,KACW,OAAb0E,EAAID,KACC,cAEA,WAGQ,OAAbC,EAAID,KACC,mBAEA,eAGb,GAEF0B,OAAAA,GACE/G,KAAK0G,WACP,G,QC/IF,MAAMM,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,O","sources":["webpack://vue-projectver2/./src/components/composables/Message.js","webpack://vue-projectver2/./src/components/private/MessageTable.vue","webpack://vue-projectver2/./src/components/private/MessageTable.vue?74e9"],"sourcesContent":["import { shallowReactive } from \"vue\";\r\nimport moment from \"moment\";\r\nimport { Member } from \"./Member\";\r\nimport { Alarm } from \"./Alarm\";\r\n\r\nexport const Message = shallowReactive({\r\n  List: localStorage.getItem(\"messageList\")\r\n    ? JSON.parse(localStorage.getItem(\"messageList\"))\r\n    : [],\r\n  refreshList() {\r\n    localStorage.setItem(\"messageList\", JSON.stringify(this.List));\r\n    this.List = JSON.parse(localStorage.getItem(\"messageList\"));\r\n  },\r\n  template: {\r\n    index: \"\",\r\n    from: \"\",\r\n    to: \"\",\r\n    reference: \"\",\r\n    title: \"\",\r\n    content: \"\",\r\n    update: moment().format(\"YYYY-MM-DD\"),\r\n    status: true, // true: 존재하는 메세지 false: 삭제된 메세지\r\n    read: false, // true: 읽은 메세지 false: 읽지 않은 메세지\r\n  },\r\n  createMessage(protoItem) {\r\n    if (protoItem.to.length > 1) {\r\n      protoItem.to.forEach((el) => {\r\n        const item = {\r\n          index: this.List.length,\r\n          from: Member.currentMember,\r\n          to: el,\r\n          reference:\r\n            protoItem.reference === \"\"\r\n              ? []\r\n              : Array.isArray(protoItem.reference)\r\n              ? protoItem.reference\r\n              : [protoItem.reference],\r\n          title: protoItem.title,\r\n          content: protoItem.content,\r\n          update: moment().format(\"YYYY-MM-DD\"),\r\n          status: true,\r\n          read: false,\r\n        };\r\n        Alarm.createAlarm(\"messageSend\", item.from, item.to);\r\n        this.List.push(item);\r\n      });\r\n      this.refreshList();\r\n      return;\r\n    }\r\n    const item = {\r\n      index: this.List.length,\r\n      from: Member.currentMember,\r\n      to: protoItem.to,\r\n      reference:\r\n        protoItem.reference === \"\"\r\n          ? []\r\n          : Array.isArray(protoItem.reference)\r\n          ? protoItem.reference\r\n          : [protoItem.reference],\r\n      title: protoItem.title,\r\n      content: protoItem.content,\r\n      update: moment().format(\"YYYY-MM-DD\"),\r\n      status: true,\r\n    };\r\n    this.List.push(item);\r\n    Alarm.createAlarm(\"messageSend\", item.from, item.to);\r\n    this.refreshList();\r\n  },\r\n  editMessage(protoMessage, parentIndex, replyCheck = false) {\r\n    const newMessage = {\r\n      index: this.List.length,\r\n      from: Member.currentMember,\r\n      to: protoMessage.to,\r\n      reference:\r\n        protoMessage.reference === \"\"\r\n          ? []\r\n          : Array.isArray(protoMessage.reference)\r\n          ? protoMessage.reference\r\n          : [protoMessage.reference],\r\n      title: protoMessage.title,\r\n      content: protoMessage.content,\r\n      update: moment().format(\"YYYY-MM-DD\"),\r\n      status: true,\r\n      read: false,\r\n    };\r\n    if (replyCheck) {\r\n      this.filterReplyMessageGroupReply(parentIndex).length > 0\r\n        ? this.addReplyMessageGroup(parentIndex, newMessage.index)\r\n        : this.createReplyMessageGroup(parentIndex, newMessage.index);\r\n    }\r\n    this.List.push(newMessage);\r\n    Alarm.createAlarm(\"messageSend\", newMessage.from, newMessage.to);\r\n    this.refreshList();\r\n  },\r\n  getAllList() {\r\n    let result = [];\r\n    this.List.forEach((el) => {\r\n      if (el.status) {\r\n        let reference = \"\";\r\n        if (el.reference) {\r\n          el.reference.forEach((el) => {\r\n            reference += Member.findMemberByIndex(el).name + \" ,\";\r\n          });\r\n        } else {\r\n          reference = [];\r\n        }\r\n        result.push({\r\n          index: el.index,\r\n          from: Member.findMemberByIndex(el.from).name,\r\n          to: Member.findMemberByIndex(el.to).name,\r\n          reference: reference,\r\n          title: el.title,\r\n          content: el.content,\r\n          update: el.update,\r\n          status: el.status,\r\n          read: el.read,\r\n        });\r\n      }\r\n    });\r\n    return result;\r\n  },\r\n  getMessage(member) {\r\n    const memberName = Member.findMemberByIndex(member).name;\r\n    return this.getAllList().filter(\r\n      (el) => el.to === memberName || el.reference.includes(memberName)\r\n    );\r\n  },\r\n  findMessageByIndex(index) {\r\n    return this.getAllList().find((el) => el.index === index);\r\n  },\r\n  findOriginalMessageByIndex(index) {\r\n    return this.List.find((el) => el.index === index);\r\n  },\r\n  deleteMessage(index) {\r\n    const target = this.findMessageByIndex(index);\r\n    target.status = false;\r\n    this.refreshList();\r\n  },\r\n  calculateMessageCountByMessage(index) {\r\n    const target = this.List.find((el) => el.index === index);\r\n    const targetMember = target.to;\r\n    const targetAllMessage = this.List.filter((el) => el.to === targetMember);\r\n    const targetmessage = targetAllMessage.find((el) => el.index === index);\r\n    return `${targetAllMessage.indexOf(targetmessage) + 1}/${\r\n      targetAllMessage.length\r\n    }`;\r\n  },\r\n  referenceCheck(index) {\r\n    const target = this.List.find((el) => el.index === index);\r\n    return target.to === Member.currentMember;\r\n  },\r\n  readMessage(index) {\r\n    const target = this.List.find((el) => el.index === index);\r\n    target.read = true;\r\n    this.refreshList();\r\n  },\r\n  // 아래 코드는 메시지가 답장을 통해서 생성되었을때, 원본과 답장을 그룹화하여 차후 메시지 보기를 할때 원본과 답장을 함께 보여주기 위한 코드입니다.\r\n  ReplyMessageGroup: localStorage.getItem(\"replyMessageGroup\")\r\n    ? JSON.parse(localStorage.getItem(\"replyMessageGroup\"))\r\n    : [],\r\n  refreshGroup() {\r\n    localStorage.setItem(\r\n      \"replyMessageGroup\",\r\n      JSON.stringify(this.ReplyMessageGroup)\r\n    );\r\n    this.ReplyMessageGroup = JSON.parse(\r\n      localStorage.getItem(\"replyMessageGroup\")\r\n    );\r\n  },\r\n  createReplyMessageGroup(originalMessage, replyMessage) {\r\n    const group = {\r\n      index: this.ReplyMessageGroup.length,\r\n      originalMessage: originalMessage,\r\n      replyMessage: [replyMessage],\r\n      status: true,\r\n    };\r\n    this.ReplyMessageGroup.push(group);\r\n    this.refreshGroup();\r\n  },\r\n  addReplyMessageGroup(originalMessage, replyMessage) {\r\n    let target = this.findGroupByOGIndex(originalMessage);\r\n    if (target === undefined) {\r\n      target = this.filterReplyMessageGroupReply(originalMessage)[0];\r\n    }\r\n    target.replyMessage.push(replyMessage);\r\n    this.refreshGroup();\r\n  },\r\n  findGroupByOGIndex(index) {\r\n    return this.ReplyMessageGroup.find((el) => el.originalMessage === index);\r\n  },\r\n  filterReplyMessageGroupReply(index) {\r\n    return this.ReplyMessageGroup.filter((el) =>\r\n      el.replyMessage.includes(index)\r\n    );\r\n  },\r\n  getReplyChainArray(unknownIndex) {\r\n    const result = [];\r\n    if (this.findGroupByOGIndex(unknownIndex)) {\r\n      const target = this.findGroupByOGIndex(unknownIndex);\r\n      result.push(this.findOriginalMessageByIndex(target.originalMessage));\r\n      target.replyMessage.forEach((el) => {\r\n        result.push(this.findOriginalMessageByIndex(el));\r\n      });\r\n      return result;\r\n    } else if (this.filterReplyMessageGroupReply(unknownIndex).length > 0) {\r\n      const target = this.filterReplyMessageGroupReply(unknownIndex);\r\n      target.forEach((el) => {\r\n        result.push(this.findOriginalMessageByIndex(el.originalMessage));\r\n        el.replyMessage.forEach((el) => {\r\n          result.push(this.findOriginalMessageByIndex(el));\r\n        });\r\n      });\r\n      return result;\r\n    } else {\r\n      return result;\r\n    }\r\n  },\r\n});\r\n","<template>\r\n  <div>\r\n    <el-table\r\n      :data=\"currentTableData\"\r\n      @current-change=\"handleCurrentChange\"\r\n      :default-sort=\"{ prop: 'index', order: 'descending' }\"\r\n      :row-class-name=\"readRow\"\r\n    >\r\n      <!-- index, 제목, 날짜 -->\r\n      <el-table-column prop=\"index\" label=\"번호\" sortable width=\"150\" />\r\n      <el-table-column prop=\"type\" label=\"종류\" width=\"150\">\r\n        <template #default=\"scope\">\r\n          <el-tag :type=\"scope.row.type === '중요' ? 'success' : 'info'\">\r\n            {{ scope.row.type }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column prop=\"title\" label=\"제목\" />\r\n      <el-table-column prop=\"update\" label=\"날짜\" sortable />\r\n    </el-table>\r\n    <div class=\"CenterButtons\">\r\n      <el-pagination\r\n        v-model=\"currentPage\"\r\n        layout=\"prev, pager, next\"\r\n        :total=\"totalPage\"\r\n        :page-size=\"15\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { Message } from \"@/components/composables/Message\";\r\nimport { Member } from \"@/components/composables/Member\";\r\nexport default {\r\n  name: \"MessageTable\",\r\n  data() {\r\n    return {\r\n      CurrentMember: Member.currentMember,\r\n      CurrentMemberName: Member.getCurrentMemberName(),\r\n      tableData: [],\r\n      currentRow: null,\r\n      currentPage: 1,\r\n      currentTableData: [],\r\n    };\r\n  },\r\n  props: {\r\n    parentType: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n  },\r\n  computed: {\r\n    MessageData() {\r\n      return Message.getAllList();\r\n    },\r\n    totalPage() {\r\n      return this.MessageData.length;\r\n    },\r\n  },\r\n  methods: {\r\n    tableInit() {\r\n      this.MessageData.forEach((el) => {\r\n        let newType = \"\";\r\n        if (this.parentType) {\r\n          // parentType가 있으면 parentType로 들어온 값을 읽고 tableData로 들어갈 값 filter\r\n          switch (this.parentType) {\r\n            case \"to\":\r\n              if (el.to !== this.CurrentMemberName) {\r\n                return;\r\n              }\r\n              newType = Message.referenceCheck(el.index) ? \"중요\" : \"참조\";\r\n              break;\r\n            case \"from\":\r\n              if (el.from !== this.CurrentMemberName) {\r\n                return;\r\n              }\r\n              newType = \"보냄\";\r\n              break;\r\n            case \"reference\":\r\n              if (el.reference.indexOf(this.CurrentMemberName) === -1) {\r\n                return;\r\n              }\r\n              newType = \"참조\";\r\n              break;\r\n            case \"read\":\r\n              if (!el.read && el.to !== this.CurrentMemberName) {\r\n                return;\r\n              }\r\n              newType = Message.referenceCheck(el.index) ? \"중요\" : \"참조\";\r\n              break;\r\n            case \"unread\":\r\n              if (el.read && el.to !== this.CurrentMemberName) {\r\n                return;\r\n              }\r\n              newType = Message.referenceCheck(el.index) ? \"중요\" : \"참조\";\r\n              break;\r\n            default:\r\n              if (el.to !== this.CurrentMemberName) {\r\n                return;\r\n              }\r\n              break;\r\n          }\r\n        } else {\r\n          if (el.to !== this.CurrentMemberName) {\r\n            return;\r\n          }\r\n          newType = Message.referenceCheck(el.index) ? \"중요\" : \"참조\";\r\n        }\r\n        this.tableData.push({\r\n          referenceIndex: el.index,\r\n          type: newType,\r\n          index: this.tableData.length + 1,\r\n          title: el.title,\r\n          update: el.update,\r\n          read: el.read,\r\n        });\r\n      });\r\n      this.currentTableData = this.tableData.slice(\r\n        (this.currentPage - 1) * 15,\r\n        this.currentPage * 15\r\n      );\r\n    },\r\n    handleCurrentChange(data) {\r\n      this.currentRow = data;\r\n      Message.readMessage(this.currentRow.referenceIndex);\r\n      this.$emit(\r\n        \"readMessage\",\r\n        this.currentRow.referenceIndex,\r\n        this.currentRow.index\r\n      );\r\n    },\r\n    readRow({ row }) {\r\n      // read, type을 확인해서 class 부여. 중요는 success로 하되 unread는 bold로, 참조는 info로 하되 unread는 bold로\r\n      if (row.read) {\r\n        if (row.type === \"중요\") {\r\n          return \"success-row\";\r\n        } else {\r\n          return \"info-row\";\r\n        }\r\n      } else {\r\n        if (row.type === \"중요\") {\r\n          return \"success-row bold\";\r\n        } else {\r\n          return \"info-row bold\";\r\n        }\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.tableInit();\r\n  },\r\n};\r\n</script>\r\n<style>\r\n.el-table .success-row {\r\n  --el-table-tr-bg-color: var(--el-color-success-light-9);\r\n}\r\n.el-table .info-row {\r\n  --el-table-tr-bg-color: var(--el-color-info-light-9);\r\n}\r\n.el-table .bold {\r\n  font-weight: bold;\r\n}\r\n</style>\r\n","import { render } from \"./MessageTable.vue?vue&type=template&id=3e27f892\"\nimport script from \"./MessageTable.vue?vue&type=script&lang=js\"\nexport * from \"./MessageTable.vue?vue&type=script&lang=js\"\n\nimport \"./MessageTable.vue?vue&type=style&index=0&id=3e27f892&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["Message","shallowReactive","List","localStorage","getItem","JSON","parse","refreshList","setItem","stringify","this","template","index","from","to","reference","title","content","update","moment","format","status","read","createMessage","protoItem","length","forEach","el","item","Member","currentMember","Array","isArray","Alarm","createAlarm","push","editMessage","protoMessage","parentIndex","replyCheck","newMessage","filterReplyMessageGroupReply","addReplyMessageGroup","createReplyMessageGroup","getAllList","result","findMemberByIndex","name","getMessage","member","memberName","filter","includes","findMessageByIndex","find","findOriginalMessageByIndex","deleteMessage","target","calculateMessageCountByMessage","targetMember","targetAllMessage","targetmessage","indexOf","referenceCheck","readMessage","ReplyMessageGroup","refreshGroup","originalMessage","replyMessage","group","findGroupByOGIndex","undefined","getReplyChainArray","unknownIndex","class","_createElementBlock","_createVNode","_component_el_table","data","$data","currentTableData","onCurrentChange","$options","handleCurrentChange","prop","order","readRow","_component_el_table_column","label","sortable","width","default","_withCtx","scope","_component_el_tag","type","row","_createElementVNode","_hoisted_1","_component_el_pagination","currentPage","$event","layout","total","totalPage","CurrentMember","CurrentMemberName","getCurrentMemberName","tableData","currentRow","props","parentType","String","computed","MessageData","methods","tableInit","newType","referenceIndex","slice","$emit","mounted","__exports__","render"],"sourceRoot":""}